{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { endpoint } from '../../config';\n\nfunction createClient(_ref) {\n  var headers = _ref.headers;\n  return new ApolloClient({\n    link: ApolloLink.from([onError(function (_ref2) {\n      var graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n      if (graphQLErrors) graphQLErrors.forEach(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path;\n        return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError));\n    }), new HttpLink({\n      uri: process.env.NODE_ENV === 'development' ? endpoint : endpoint,\n      request: function request(operation) {\n        operation.setContext({\n          fetchOptions: {\n            credentials: 'include'\n          },\n          headers: headers\n        });\n      }\n    })]),\n    cache: new InMemoryCache(),\n    connectToDevTools: process.env.NODE_ENV === 'development'\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Volumes/Data/Dropbox/Programming/Sources/advanced-React/sick-fits/frontend/src/utils/withData.js"],"names":["withApollo","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","endpoint","createClient","headers","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","process","env","NODE_ENV","request","operation","setContext","fetchOptions","credentials","cache","connectToDevTools"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,SAASC,YAAT,OAAmC;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACjC,SAAO,IAAIP,YAAJ,CAAiB;AACtBQ,IAAAA,IAAI,EAAEJ,UAAU,CAACK,IAAX,CAAgB,CACpBN,OAAO,CAAC,iBAAqC;AAAA,UAAlCO,aAAkC,SAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB;AAAA,YAAGC,OAAH,SAAGA,OAAH;AAAA,YAAYC,SAAZ,SAAYA,SAAZ;AAAA,YAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,eACpBC,OAAO,CAACC,GAAR,qCAAyCJ,OAAzC,yBAA+DC,SAA/D,qBAAmFC,IAAnF,EADoB;AAAA,OAAtB;AAGF,UAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,4BAAgCN,YAAhC;AACnB,KANM,CADa,EAQpB,IAAIT,QAAJ,CAAa;AACXgB,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyChB,QAAzC,GAAoDA,QAD9C;AAEXiB,MAAAA,OAAO,EAAE,iBAAAC,SAAS,EAAI;AACpBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,UAAAA,YAAY,EAAE;AACZC,YAAAA,WAAW,EAAE;AADD,WADK;AAInBnB,UAAAA,OAAO,EAAPA;AAJmB,SAArB;AAMD;AATU,KAAb,CARoB,CAAhB,CADgB;AAqBtBoB,IAAAA,KAAK,EAAE,IAAI1B,aAAJ,EArBe;AAsBtB2B,IAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAtBtB,GAAjB,CAAP;AAwBD;;AAED,eAAetB,UAAU,CAACO,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { endpoint } from '../../config';\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    link: ApolloLink.from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors)\n          graphQLErrors.forEach(({ message, locations, path }) =>\n            console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n          );\n        if (networkError) console.log(`[Network error]: ${networkError}`);\n      }),\n      new HttpLink({\n        uri: process.env.NODE_ENV === 'development' ? endpoint : endpoint,\n        request: operation => {\n          operation.setContext({\n            fetchOptions: {\n              credentials: 'include',\n            },\n            headers,\n          });\n        },\n      }),\n    ]),\n    cache: new InMemoryCache(),\n    connectToDevTools: process.env.NODE_ENV === 'development',\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}