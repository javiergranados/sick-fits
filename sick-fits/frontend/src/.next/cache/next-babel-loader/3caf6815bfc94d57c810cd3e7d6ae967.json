{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Volumes/Data/Dropbox/Programming/Sources/advanced-React/sick-fits/frontend/src/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from 'next/app';\nimport { ApolloProvider } from 'react-apollo';\nimport Page from '../components/Page';\nimport withData from '../utils/withData';\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    } // this exposes the query to the user\n\n\n    pageProps.query = ctx.query;\n    return pageProps;\n  }\n\n  render() {\n    const {\n      Component,\n      apollo,\n      pageProps\n    } = this.props;\n    return __jsx(ApolloProvider, {\n      client: apollo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, __jsx(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Volumes/Data/Dropbox/Programming/Sources/advanced-React/sick-fits/frontend/src/pages/_app.js"],"names":["App","ApolloProvider","Page","withData","MyApp","getInitialProps","Component","ctx","pageProps","query","render","apollo","props"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAEA,MAAMC,KAAN,SAAoBJ,GAApB,CAAwB;AACtB,eAAaK,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIF,SAAS,CAACD,eAAd,EAA+B;AAC7BG,MAAAA,SAAS,GAAG,MAAMF,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD,KAJ8C,CAK/C;;;AACAC,IAAAA,SAAS,CAACC,KAAV,GAAkBF,GAAG,CAACE,KAAtB;AACA,WAAOD,SAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEJ,MAAAA,SAAF;AAAaK,MAAAA,MAAb;AAAqBH,MAAAA;AAArB,QAAmC,KAAKI,KAA9C;AACA,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,CADF;AAOD;;AApBqB;;AAuBxB,eAAeL,QAAQ,CAACC,KAAD,CAAvB","sourcesContent":["import App from 'next/app';\nimport { ApolloProvider } from 'react-apollo';\nimport Page from '../components/Page';\nimport withData from '../utils/withData';\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n    // this exposes the query to the user\n    pageProps.query = ctx.query;\n    return pageProps;\n  }\n\n  render() {\n    const { Component, apollo, pageProps } = this.props;\n    return (\n      <ApolloProvider client={apollo}>\n        <Page>\n          <Component {...pageProps} />\n        </Page>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withData(MyApp);\n"]},"metadata":{},"sourceType":"module"}