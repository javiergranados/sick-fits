{"ast":null,"code":"import withApollo from 'next-with-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { endpoint } from '../../config';\n\nfunction createClient({\n  headers\n}) {\n  return new ApolloClient({\n    link: ApolloLink.from([onError(({\n      graphQLErrors,\n      networkError\n    }) => {\n      if (graphQLErrors) graphQLErrors.forEach(({\n        message,\n        locations,\n        path\n      }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }), new HttpLink({\n      uri: process.env.NODE_ENV === 'development' ? endpoint : endpoint,\n      request: operation => {\n        operation.setContext({\n          fetchOptions: {\n            credentials: 'include'\n          },\n          headers\n        });\n      }\n    })]),\n    cache: new InMemoryCache(),\n    connectToDevTools: process.env.NODE_ENV === 'development'\n  });\n}\n\nexport default withApollo(createClient);","map":{"version":3,"sources":["/Volumes/Data/Dropbox/Programming/Sources/advanced-React/sick-fits/frontend/src/utils/withData.js"],"names":["withApollo","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","endpoint","createClient","headers","link","from","graphQLErrors","networkError","forEach","message","locations","path","console","log","uri","process","env","NODE_ENV","request","operation","setContext","fetchOptions","credentials","cache","connectToDevTools"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAmC;AACjC,SAAO,IAAIP,YAAJ,CAAiB;AACtBQ,IAAAA,IAAI,EAAEJ,UAAU,CAACK,IAAX,CAAgB,CACpBN,OAAO,CAAC,CAAC;AAAEO,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,KAAqC;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,SAAX;AAAsBC,QAAAA;AAAtB,OAAD,KACpBC,OAAO,CAACC,GAAR,CAAa,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAAxF,CADF;AAGF,UAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,CAAa,oBAAmBN,YAAa,EAA7C;AACnB,KANM,CADa,EAQpB,IAAIT,QAAJ,CAAa;AACXgB,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyChB,QAAzC,GAAoDA,QAD9C;AAEXiB,MAAAA,OAAO,EAAEC,SAAS,IAAI;AACpBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,UAAAA,YAAY,EAAE;AACZC,YAAAA,WAAW,EAAE;AADD,WADK;AAInBnB,UAAAA;AAJmB,SAArB;AAMD;AATU,KAAb,CARoB,CAAhB,CADgB;AAqBtBoB,IAAAA,KAAK,EAAE,IAAI1B,aAAJ,EArBe;AAsBtB2B,IAAAA,iBAAiB,EAAET,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAtBtB,GAAjB,CAAP;AAwBD;;AAED,eAAetB,UAAU,CAACO,YAAD,CAAzB","sourcesContent":["import withApollo from 'next-with-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink } from 'apollo-link';\nimport { endpoint } from '../../config';\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    link: ApolloLink.from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors)\n          graphQLErrors.forEach(({ message, locations, path }) =>\n            console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n          );\n        if (networkError) console.log(`[Network error]: ${networkError}`);\n      }),\n      new HttpLink({\n        uri: process.env.NODE_ENV === 'development' ? endpoint : endpoint,\n        request: operation => {\n          operation.setContext({\n            fetchOptions: {\n              credentials: 'include',\n            },\n            headers,\n          });\n        },\n      }),\n    ]),\n    cache: new InMemoryCache(),\n    connectToDevTools: process.env.NODE_ENV === 'development',\n  });\n}\n\nexport default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}